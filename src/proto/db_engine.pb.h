// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_engine.proto

#ifndef PROTOBUF_db_5fengine_2eproto__INCLUDED
#define PROTOBUF_db_5fengine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_5fengine_2eproto();
void protobuf_AssignDesc_db_5fengine_2eproto();
void protobuf_ShutdownFile_db_5fengine_2eproto();

class DBRequest;
class DBResponse;

enum DBCode {
  SUC = 0,
  ERR = 1,
  NOFOUND = 3
};
bool DBCode_IsValid(int value);
const DBCode DBCode_MIN = SUC;
const DBCode DBCode_MAX = NOFOUND;
const int DBCode_ARRAYSIZE = DBCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBCode_descriptor();
inline const ::std::string& DBCode_Name(DBCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBCode_descriptor(), value);
}
inline bool DBCode_Parse(
    const ::std::string& name, DBCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBCode>(
    DBCode_descriptor(), name, value);
}
// ===================================================================

class DBRequest : public ::google::protobuf::Message {
 public:
  DBRequest();
  virtual ~DBRequest();

  DBRequest(const DBRequest& from);

  inline DBRequest& operator=(const DBRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBRequest& default_instance();

  void Swap(DBRequest* other);

  // implements Message ----------------------------------------------

  DBRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBRequest& from);
  void MergeFrom(const DBRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_key = 1 [default = ""];
  inline bool has_db_key() const;
  inline void clear_db_key();
  static const int kDbKeyFieldNumber = 1;
  inline const ::std::string& db_key() const;
  inline void set_db_key(const ::std::string& value);
  inline void set_db_key(const char* value);
  inline void set_db_key(const char* value, size_t size);
  inline ::std::string* mutable_db_key();
  inline ::std::string* release_db_key();
  inline void set_allocated_db_key(::std::string* db_key);

  // optional string db_value = 2 [default = ""];
  inline bool has_db_value() const;
  inline void clear_db_value();
  static const int kDbValueFieldNumber = 2;
  inline const ::std::string& db_value() const;
  inline void set_db_value(const ::std::string& value);
  inline void set_db_value(const char* value);
  inline void set_db_value(const char* value, size_t size);
  inline ::std::string* mutable_db_value();
  inline ::std::string* release_db_value();
  inline void set_allocated_db_value(::std::string* db_value);

  // @@protoc_insertion_point(class_scope:DBRequest)
 private:
  inline void set_has_db_key();
  inline void clear_has_db_key();
  inline void set_has_db_value();
  inline void clear_has_db_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* db_key_;
  ::std::string* db_value_;
  friend void  protobuf_AddDesc_db_5fengine_2eproto();
  friend void protobuf_AssignDesc_db_5fengine_2eproto();
  friend void protobuf_ShutdownFile_db_5fengine_2eproto();

  void InitAsDefaultInstance();
  static DBRequest* default_instance_;
};
// -------------------------------------------------------------------

class DBResponse : public ::google::protobuf::Message {
 public:
  DBResponse();
  virtual ~DBResponse();

  DBResponse(const DBResponse& from);

  inline DBResponse& operator=(const DBResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBResponse& default_instance();

  void Swap(DBResponse* other);

  // implements Message ----------------------------------------------

  DBResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBResponse& from);
  void MergeFrom(const DBResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DBCode code = 1 [default = SUC];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::DBCode code() const;
  inline void set_code(::DBCode value);

  // optional string db_res = 2 [default = "NULL"];
  inline bool has_db_res() const;
  inline void clear_db_res();
  static const int kDbResFieldNumber = 2;
  inline const ::std::string& db_res() const;
  inline void set_db_res(const ::std::string& value);
  inline void set_db_res(const char* value);
  inline void set_db_res(const char* value, size_t size);
  inline ::std::string* mutable_db_res();
  inline ::std::string* release_db_res();
  inline void set_allocated_db_res(::std::string* db_res);

  // @@protoc_insertion_point(class_scope:DBResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_db_res();
  inline void clear_has_db_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_db_res_;
  ::std::string* db_res_;
  int code_;
  friend void  protobuf_AddDesc_db_5fengine_2eproto();
  friend void protobuf_AssignDesc_db_5fengine_2eproto();
  friend void protobuf_ShutdownFile_db_5fengine_2eproto();

  void InitAsDefaultInstance();
  static DBResponse* default_instance_;
};
// ===================================================================

class EngineService_Stub;

class EngineService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EngineService() {};
 public:
  virtual ~EngineService();

  typedef EngineService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Put(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EngineService);
};

class EngineService_Stub : public EngineService {
 public:
  EngineService_Stub(::google::protobuf::RpcChannel* channel);
  EngineService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EngineService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EngineService ------------------------------------------

  void Put(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);
  void Delete(::google::protobuf::RpcController* controller,
                       const ::DBRequest* request,
                       ::DBResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EngineService_Stub);
};


// ===================================================================


// ===================================================================

// DBRequest

// optional string db_key = 1 [default = ""];
inline bool DBRequest::has_db_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBRequest::set_has_db_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBRequest::clear_has_db_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBRequest::clear_db_key() {
  if (db_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_key_->clear();
  }
  clear_has_db_key();
}
inline const ::std::string& DBRequest::db_key() const {
  // @@protoc_insertion_point(field_get:DBRequest.db_key)
  return *db_key_;
}
inline void DBRequest::set_db_key(const ::std::string& value) {
  set_has_db_key();
  if (db_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_key_ = new ::std::string;
  }
  db_key_->assign(value);
  // @@protoc_insertion_point(field_set:DBRequest.db_key)
}
inline void DBRequest::set_db_key(const char* value) {
  set_has_db_key();
  if (db_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_key_ = new ::std::string;
  }
  db_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBRequest.db_key)
}
inline void DBRequest::set_db_key(const char* value, size_t size) {
  set_has_db_key();
  if (db_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_key_ = new ::std::string;
  }
  db_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBRequest.db_key)
}
inline ::std::string* DBRequest::mutable_db_key() {
  set_has_db_key();
  if (db_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBRequest.db_key)
  return db_key_;
}
inline ::std::string* DBRequest::release_db_key() {
  clear_has_db_key();
  if (db_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = db_key_;
    db_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DBRequest::set_allocated_db_key(::std::string* db_key) {
  if (db_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_key_;
  }
  if (db_key) {
    set_has_db_key();
    db_key_ = db_key;
  } else {
    clear_has_db_key();
    db_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBRequest.db_key)
}

// optional string db_value = 2 [default = ""];
inline bool DBRequest::has_db_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBRequest::set_has_db_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBRequest::clear_has_db_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBRequest::clear_db_value() {
  if (db_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_value_->clear();
  }
  clear_has_db_value();
}
inline const ::std::string& DBRequest::db_value() const {
  // @@protoc_insertion_point(field_get:DBRequest.db_value)
  return *db_value_;
}
inline void DBRequest::set_db_value(const ::std::string& value) {
  set_has_db_value();
  if (db_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_value_ = new ::std::string;
  }
  db_value_->assign(value);
  // @@protoc_insertion_point(field_set:DBRequest.db_value)
}
inline void DBRequest::set_db_value(const char* value) {
  set_has_db_value();
  if (db_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_value_ = new ::std::string;
  }
  db_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBRequest.db_value)
}
inline void DBRequest::set_db_value(const char* value, size_t size) {
  set_has_db_value();
  if (db_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_value_ = new ::std::string;
  }
  db_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBRequest.db_value)
}
inline ::std::string* DBRequest::mutable_db_value() {
  set_has_db_value();
  if (db_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DBRequest.db_value)
  return db_value_;
}
inline ::std::string* DBRequest::release_db_value() {
  clear_has_db_value();
  if (db_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = db_value_;
    db_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DBRequest::set_allocated_db_value(::std::string* db_value) {
  if (db_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_value_;
  }
  if (db_value) {
    set_has_db_value();
    db_value_ = db_value;
  } else {
    clear_has_db_value();
    db_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DBRequest.db_value)
}

// -------------------------------------------------------------------

// DBResponse

// optional .DBCode code = 1 [default = SUC];
inline bool DBResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::DBCode DBResponse::code() const {
  // @@protoc_insertion_point(field_get:DBResponse.code)
  return static_cast< ::DBCode >(code_);
}
inline void DBResponse::set_code(::DBCode value) {
  assert(::DBCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:DBResponse.code)
}

// optional string db_res = 2 [default = "NULL"];
inline bool DBResponse::has_db_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBResponse::set_has_db_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBResponse::clear_has_db_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBResponse::clear_db_res() {
  if (db_res_ != _default_db_res_) {
    db_res_->assign(*_default_db_res_);
  }
  clear_has_db_res();
}
inline const ::std::string& DBResponse::db_res() const {
  // @@protoc_insertion_point(field_get:DBResponse.db_res)
  return *db_res_;
}
inline void DBResponse::set_db_res(const ::std::string& value) {
  set_has_db_res();
  if (db_res_ == _default_db_res_) {
    db_res_ = new ::std::string;
  }
  db_res_->assign(value);
  // @@protoc_insertion_point(field_set:DBResponse.db_res)
}
inline void DBResponse::set_db_res(const char* value) {
  set_has_db_res();
  if (db_res_ == _default_db_res_) {
    db_res_ = new ::std::string;
  }
  db_res_->assign(value);
  // @@protoc_insertion_point(field_set_char:DBResponse.db_res)
}
inline void DBResponse::set_db_res(const char* value, size_t size) {
  set_has_db_res();
  if (db_res_ == _default_db_res_) {
    db_res_ = new ::std::string;
  }
  db_res_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DBResponse.db_res)
}
inline ::std::string* DBResponse::mutable_db_res() {
  set_has_db_res();
  if (db_res_ == _default_db_res_) {
    db_res_ = new ::std::string(*_default_db_res_);
  }
  // @@protoc_insertion_point(field_mutable:DBResponse.db_res)
  return db_res_;
}
inline ::std::string* DBResponse::release_db_res() {
  clear_has_db_res();
  if (db_res_ == _default_db_res_) {
    return NULL;
  } else {
    ::std::string* temp = db_res_;
    db_res_ = const_cast< ::std::string*>(_default_db_res_);
    return temp;
  }
}
inline void DBResponse::set_allocated_db_res(::std::string* db_res) {
  if (db_res_ != _default_db_res_) {
    delete db_res_;
  }
  if (db_res) {
    set_has_db_res();
    db_res_ = db_res;
  } else {
    clear_has_db_res();
    db_res_ = const_cast< ::std::string*>(_default_db_res_);
  }
  // @@protoc_insertion_point(field_set_allocated:DBResponse.db_res)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DBCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DBCode>() {
  return ::DBCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_5fengine_2eproto__INCLUDED

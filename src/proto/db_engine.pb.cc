// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_engine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "db_engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db_engine {

namespace {

const ::google::protobuf::Descriptor* DBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DBCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* EngineService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_db_5fengine_2eproto() {
  protobuf_AddDesc_db_5fengine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "db_engine.proto");
  GOOGLE_CHECK(file != NULL);
  DBRequest_descriptor_ = file->message_type(0);
  static const int DBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRequest, db_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRequest, db_value_),
  };
  DBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBRequest_descriptor_,
      DBRequest::default_instance_,
      DBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBRequest));
  DBResponse_descriptor_ = file->message_type(1);
  static const int DBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBResponse, db_res_),
  };
  DBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBResponse_descriptor_,
      DBResponse::default_instance_,
      DBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBResponse));
  DBCode_descriptor_ = file->enum_type(0);
  EngineService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_db_5fengine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBRequest_descriptor_, &DBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBResponse_descriptor_, &DBResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_db_5fengine_2eproto() {
  delete DBRequest::default_instance_;
  delete DBRequest_reflection_;
  delete DBResponse::default_instance_;
  delete DBResponse_reflection_;
  delete DBResponse::_default_db_res_;
}

void protobuf_AddDesc_db_5fengine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017db_engine.proto\022\tdb_engine\"1\n\tDBReques"
    "t\022\020\n\006db_key\030\001 \001(\t:\000\022\022\n\010db_value\030\002 \001(\t:\000\""
    "H\n\nDBResponse\022$\n\004code\030\001 \001(\0162\021.db_engine."
    "DBCode:\003SUC\022\024\n\006db_res\030\002 \001(\t:\004NULL*\'\n\006DBC"
    "ode\022\007\n\003SUC\020\000\022\007\n\003ERR\020\001\022\013\n\007NOFOUND\020\0032\256\001\n\rE"
    "ngineService\0222\n\003Put\022\024.db_engine.DBReques"
    "t\032\025.db_engine.DBResponse\0222\n\003Get\022\024.db_eng"
    "ine.DBRequest\032\025.db_engine.DBResponse\0225\n\006"
    "Delete\022\024.db_engine.DBRequest\032\025.db_engine"
    ".DBResponseB\003\200\001\001", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "db_engine.proto", &protobuf_RegisterTypes);
  DBRequest::default_instance_ = new DBRequest();
  DBResponse::_default_db_res_ =
      new ::std::string("NULL", 4);
  DBResponse::default_instance_ = new DBResponse();
  DBRequest::default_instance_->InitAsDefaultInstance();
  DBResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_db_5fengine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_db_5fengine_2eproto {
  StaticDescriptorInitializer_db_5fengine_2eproto() {
    protobuf_AddDesc_db_5fengine_2eproto();
  }
} static_descriptor_initializer_db_5fengine_2eproto_;
const ::google::protobuf::EnumDescriptor* DBCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCode_descriptor_;
}
bool DBCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DBRequest::kDbKeyFieldNumber;
const int DBRequest::kDbValueFieldNumber;
#endif  // !_MSC_VER

DBRequest::DBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_engine.DBRequest)
}

void DBRequest::InitAsDefaultInstance() {
}

DBRequest::DBRequest(const DBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_engine.DBRequest)
}

void DBRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBRequest::~DBRequest() {
  // @@protoc_insertion_point(destructor:db_engine.DBRequest)
  SharedDtor();
}

void DBRequest::SharedDtor() {
  if (db_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_key_;
  }
  if (db_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_value_;
  }
  if (this != default_instance_) {
  }
}

void DBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBRequest_descriptor_;
}

const DBRequest& DBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fengine_2eproto();
  return *default_instance_;
}

DBRequest* DBRequest::default_instance_ = NULL;

DBRequest* DBRequest::New() const {
  return new DBRequest;
}

void DBRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_db_key()) {
      if (db_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        db_key_->clear();
      }
    }
    if (has_db_value()) {
      if (db_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        db_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_engine.DBRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_key = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_key().data(), this->db_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "db_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_value;
        break;
      }

      // optional string db_value = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_db_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_value().data(), this->db_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "db_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_engine.DBRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_engine.DBRequest)
  return false;
#undef DO_
}

void DBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_engine.DBRequest)
  // optional string db_key = 1 [default = ""];
  if (has_db_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_key().data(), this->db_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_key(), output);
  }

  // optional string db_value = 2 [default = ""];
  if (has_db_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_value().data(), this->db_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_engine.DBRequest)
}

::google::protobuf::uint8* DBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_engine.DBRequest)
  // optional string db_key = 1 [default = ""];
  if (has_db_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_key().data(), this->db_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_key(), target);
  }

  // optional string db_value = 2 [default = ""];
  if (has_db_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_value().data(), this->db_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_engine.DBRequest)
  return target;
}

int DBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string db_key = 1 [default = ""];
    if (has_db_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_key());
    }

    // optional string db_value = 2 [default = ""];
    if (has_db_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBRequest::MergeFrom(const DBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_key()) {
      set_db_key(from.db_key());
    }
    if (from.has_db_value()) {
      set_db_value(from.db_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRequest::CopyFrom(const DBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRequest::IsInitialized() const {

  return true;
}

void DBRequest::Swap(DBRequest* other) {
  if (other != this) {
    std::swap(db_key_, other->db_key_);
    std::swap(db_value_, other->db_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBRequest_descriptor_;
  metadata.reflection = DBRequest_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DBResponse::_default_db_res_ = NULL;
#ifndef _MSC_VER
const int DBResponse::kCodeFieldNumber;
const int DBResponse::kDbResFieldNumber;
#endif  // !_MSC_VER

DBResponse::DBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_engine.DBResponse)
}

void DBResponse::InitAsDefaultInstance() {
}

DBResponse::DBResponse(const DBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_engine.DBResponse)
}

void DBResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  db_res_ = const_cast< ::std::string*>(_default_db_res_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBResponse::~DBResponse() {
  // @@protoc_insertion_point(destructor:db_engine.DBResponse)
  SharedDtor();
}

void DBResponse::SharedDtor() {
  if (db_res_ != _default_db_res_) {
    delete db_res_;
  }
  if (this != default_instance_) {
  }
}

void DBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBResponse_descriptor_;
}

const DBResponse& DBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_db_5fengine_2eproto();
  return *default_instance_;
}

DBResponse* DBResponse::default_instance_ = NULL;

DBResponse* DBResponse::New() const {
  return new DBResponse;
}

void DBResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_db_res()) {
      if (db_res_ != _default_db_res_) {
        db_res_->assign(*_default_db_res_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_engine.DBResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db_engine.DBCode code = 1 [default = SUC];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::db_engine::DBCode_IsValid(value)) {
            set_code(static_cast< ::db_engine::DBCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_res;
        break;
      }

      // optional string db_res = 2 [default = "NULL"];
      case 2: {
        if (tag == 18) {
         parse_db_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_res().data(), this->db_res().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "db_res");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_engine.DBResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_engine.DBResponse)
  return false;
#undef DO_
}

void DBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_engine.DBResponse)
  // optional .db_engine.DBCode code = 1 [default = SUC];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string db_res = 2 [default = "NULL"];
  if (has_db_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_res().data(), this->db_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_res");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_engine.DBResponse)
}

::google::protobuf::uint8* DBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_engine.DBResponse)
  // optional .db_engine.DBCode code = 1 [default = SUC];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string db_res = 2 [default = "NULL"];
  if (has_db_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_res().data(), this->db_res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db_res");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_engine.DBResponse)
  return target;
}

int DBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .db_engine.DBCode code = 1 [default = SUC];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string db_res = 2 [default = "NULL"];
    if (has_db_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBResponse::MergeFrom(const DBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_db_res()) {
      set_db_res(from.db_res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBResponse::CopyFrom(const DBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBResponse::IsInitialized() const {

  return true;
}

void DBResponse::Swap(DBResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(db_res_, other->db_res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBResponse_descriptor_;
  metadata.reflection = DBResponse_reflection_;
  return metadata;
}


// ===================================================================

EngineService::~EngineService() {}

const ::google::protobuf::ServiceDescriptor* EngineService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EngineService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* EngineService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return EngineService_descriptor_;
}

void EngineService::Put(::google::protobuf::RpcController* controller,
                         const ::db_engine::DBRequest*,
                         ::db_engine::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Put() not implemented.");
  done->Run();
}

void EngineService::Get(::google::protobuf::RpcController* controller,
                         const ::db_engine::DBRequest*,
                         ::db_engine::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void EngineService::Delete(::google::protobuf::RpcController* controller,
                         const ::db_engine::DBRequest*,
                         ::db_engine::DBResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void EngineService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), EngineService_descriptor_);
  switch(method->index()) {
    case 0:
      Put(controller,
             ::google::protobuf::down_cast<const ::db_engine::DBRequest*>(request),
             ::google::protobuf::down_cast< ::db_engine::DBResponse*>(response),
             done);
      break;
    case 1:
      Get(controller,
             ::google::protobuf::down_cast<const ::db_engine::DBRequest*>(request),
             ::google::protobuf::down_cast< ::db_engine::DBResponse*>(response),
             done);
      break;
    case 2:
      Delete(controller,
             ::google::protobuf::down_cast<const ::db_engine::DBRequest*>(request),
             ::google::protobuf::down_cast< ::db_engine::DBResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& EngineService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::db_engine::DBRequest::default_instance();
    case 1:
      return ::db_engine::DBRequest::default_instance();
    case 2:
      return ::db_engine::DBRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& EngineService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::db_engine::DBResponse::default_instance();
    case 1:
      return ::db_engine::DBResponse::default_instance();
    case 2:
      return ::db_engine::DBResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

EngineService_Stub::EngineService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EngineService_Stub::EngineService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
EngineService_Stub::~EngineService_Stub() {
  if (owns_channel_) delete channel_;
}

void EngineService_Stub::Put(::google::protobuf::RpcController* controller,
                              const ::db_engine::DBRequest* request,
                              ::db_engine::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void EngineService_Stub::Get(::google::protobuf::RpcController* controller,
                              const ::db_engine::DBRequest* request,
                              ::db_engine::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void EngineService_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::db_engine::DBRequest* request,
                              ::db_engine::DBResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace db_engine

// @@protoc_insertion_point(global_scope)
